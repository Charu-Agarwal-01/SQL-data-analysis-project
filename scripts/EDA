/*----------------------------------------------------------------------------------------------------------------------------------
Purpose: 
         This report consist of Exploratory Data Analysis performed on the cleaned data to gain better
understanding of the data.

Key Highlights:
         - Exploring different countries our customers come from.
         - Exploring all category, subcategory and name of our products.
         - Generate a report that shows all key metrics of the business
		     - Total number of customers that have placed an order.
         - Worst and top performing products based on revenue
-------------------------------------------------------------------------------------------------------------------------------------*/

-- Explore all objects in a database
select * from INFORMATION_SCHEMA.TABLES;

-- Explore all countries our customers come from
select distinct(country) from customers;

-- Explore all category, subcategory and name of our products
select distinct category , subcategory, product_name from products;

-- First and the last order dates and how many years of sales data available?
select min(order_date) as min_order_dt , max(order_date) as max_order_dt, 
timestampdiff(year, min(order_date), max(order_date)) as years_of_sales from sales;

-- Find the youngest and the oldest customer
select min(birth_date) as oldest_bdate, 
timestampdiff(year, min(birth_date), curdate()) as oldest_age,
 max(birth_date) as youngest_bdate,
timestampdiff(year, max(birth_date), curdate()) as youngest_age from customers;


-- Total number of customers that has placed an order
select count(distinct(customer_key)) as total_customers from sales;

-- Generate a report that shows all key metrics of the business
select 'Total Sales' as measure_name, sum(sales_amount) as measure_value from sales
UNION
select 'Total Quantity' , sum(quantity) from sales
UNION 
select 'Avg selling price', round(avg(sales_price),2) from sales
UNION
select 'Total Customers' , count(distinct(customer_key)) from sales
UNION
select 'Total Orders' , count(distinct(order_number)) from sales
UNION
select 'Total Products', count(distinct(product_key)) from sales;

-- magnitude analysis
-- Total customers by country
select country, count(customer_key) as total_customers 
from customers group by country
order by total_customers desc ;

-- Total customers by gender
select gender, count(customer_key) as total_customers 
from customers group by gender
order by total_customers  desc;


-- Total products by category
select category, count(product_key) as total_products 
from products group by category
order by total_products desc;


-- average costs in each category
select category, avg(cost) as average_cost 
from products group by category
order by average_cost desc;


-- Total revenue generated for each category
select p.category, sum(s.sales_amount) as total_revenue
from sales s left join products p 
on p.product_key = s.product_key
group by p.category
order by total_revenue desc;

-- Total revenue generated by each customer
select c.customer_key, c.first_name, c.last_name , sum(s.sales_amount) as total_revenue
from customers c join sales s 
on c.customer_key = s.customer_key
group by c.customer_key, c.first_name, c.last_name
order by total_revenue desc;

-- Distribution of sold items across countries
select c.country, sum(s.quantity) as total_sold_items
from customers c join sales s 
on c.customer_key = s.customer_key
group by c.country
order by total_sold_items desc;

-- Which are the top products based on revenue
select p.product_name, p.category, sum(s.sales_amount) as total_revenue
from sales s left join products p 
on p.product_key = s.product_key
group by p.product_name, p.category
order by total_revenue desc limit 10;

-- Worst performing products in terms of revenue
select p.product_name, p.category, sum(s.sales_amount) as total_revenue
from sales s left join products p 
on p.product_key = s.product_key
group by p.product_name, p.category
order by total_revenue limit 10;

-- Customers with least orders placed
select c.customer_key, c.first_name, c.last_name, count(distinct(order_number)) as total_orders
from sales s join customers c
on c.customer_key = s.customer_key
group by c.customer_key, c.first_name, c.last_name
order by total_orders limit 20
