----------------------------------------------------------------------------------------------------------------------------
Which product lines dominate overall sales?
---------------------------------------------------------------------------------------------------------------------------------
SELECT p.product_line, 
       SUM(s.sales_amount) AS total_revenue,
       ROUND(100.0 * SUM(s.sales_amount) / SUM(SUM(s.sales_amount)) OVER(), 2) 
       AS pct_contribution
FROM sales s
JOIN products p ON s.product_key = p.product_key
GROUP BY p.product_line
ORDER BY total_revenue DESC;

<img src="images/1.png" alt="Sample 1" width="600"/>


----------------------------------------------------------------------------------------------------------------------------
What is the revenue generated by each product?
-----------------------------------------------------------------------------------------------------------------------------------
WITH ranked_products AS (
    SELECT p.product_name, 
           SUM(s.sales_amount) AS total_revenue,
           RANK() OVER(ORDER BY SUM(s.sales_amount) DESC) AS rank_order,
           SUM(SUM(s.sales_amount)) OVER() AS grand_total
    FROM sales s
    JOIN products p ON s.product_key = p.product_key
    GROUP BY p.product_name
)
SELECT product_name, 
           total_revenue,
           ROUND(100 * total_revenue / grand_total, 2) AS revenue_pct
    FROM ranked_products


------------------------------------------------------------------------------------------------------------------------------
Are high-volume products always high-revenue?
------------------------------------------------------------------------------------------------------------------------------
SELECT p.product_name, SUM(s.quantity) AS total_units,
       SUM(s.sales_amount) AS total_revenue
FROM sales s
JOIN products p ON s.product_key = p.product_key
GROUP BY p.product_name
ORDER BY total_units DESC;




--------------------------------------------------------------------------------------------------------------------------------
Product subcategories with highest average profit margins
-----------------------------------------------------------------------------------------------------------------------------------
select 
    p.subcategory,
    avg(s.sales_price - p.cost) as avg_profit_margin
from sales s
join products p on s.product_key = p.product_key
group by p.subcategory
order by avg_profit_margin desc;


------------------------------------------------------------------------------------------------------------------------------
How much are sales growing each year?
------------------------------------------------------------------------------------------------------------------------------
WITH yearly_sales AS (
    SELECT YEAR(order_date) AS year, SUM(sales_amount) AS total_sales
    FROM sales
    GROUP BY YEAR(order_date)
)
SELECT year, total_sales,
       LAG(total_sales) OVER(ORDER BY year) AS prev_year_sales,
       ROUND((total_sales - LAG(total_sales) OVER(ORDER BY year)) /
             NULLIF(LAG(total_sales) OVER(ORDER BY year),0), 2) *100 AS growth_pct
FROM yearly_sales;



-----------------------------------------------------------------------------------------------------------------------------
Segmenting customers based on Recency, Frequency and Monetary
--------------------------------------------------------------------------------------------------------------------------------------
SELECT c.customer_id,
           concat(c.first_name, ' ', c.last_name) as name,
           DATEDIFF(CURDATE(), MAX(s.order_date)) AS recency,
           COUNT(DISTINCT s.order_number) AS frequency,
           SUM(s.sales_amount) AS monetary
FROM sales s
JOIN customers c ON s.customer_key = c.customer_key
GROUP BY c.customer_id, concat(c.first_name, ' ', c.last_name)



---------------------------------------------------------------------------------------------------------------------------
Which customers havenâ€™t purchased recently?
----------------------------------------------------------------------------------------------------------------------------
SELECT c.customer_id, c.first_name, c.last_name,
       MAX(s.order_date) AS last_order,
       DATEDIFF(CURDATE(), MAX(s.order_date)) AS days_since_last_purchase
FROM customers c
JOIN sales s ON c.customer_key = s.customer_key
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY days_since_last_purchase DESC;



-----------------------------------------------------------------------------------------------------------------------------------
Which categories are most often delayed?
----------------------------------------------------------------------------------------------------------------------------------
SELECT p.category, 
       ROUND(AVG(DATEDIFF(s.shipping_date, s.due_date)), 2) AS avg_delay_days
FROM sales s
JOIN products p ON s.product_key = p.product_key
WHERE s.shipping_date > s.due_date
GROUP BY p.category
ORDER BY avg_delay_days DESC;



----------------------------------------------------------------------------------------------------------------------------------
Top 10 customers by total revenue with country and gender info
------------------------------------------------------------------------------------------------------------------------------
select 
	c.customer_key,
	c.first_name,
	c.last_name,
	c.country,
	c.gender,
	sum(s.sales_amount) as total_spent
from sales s
join customers c on s.customer_key = c.customer_key
group by c.customer_key, c.first_name, c.last_name, c.country, c.gender
order by total_spent desc limit 10;


------------------------------------------------------------------------------------------------------------------------------
Which geographies are most profitable?
------------------------------------------------------------------------------------------------------------------------------
SELECT c.country,
       SUM(s.sales_amount - (p.cost * s.quantity)) AS total_profit
FROM sales s
JOIN products p ON s.product_key = p.product_key
JOIN customers c ON s.customer_key = c.customer_key
GROUP BY c.country
ORDER BY total_profit DESC;
LIMIT 10;


